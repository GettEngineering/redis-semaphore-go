// Code generated by MockGen. DO NOT EDIT.
// Source: ./semaphore/semaphore-logger/logger_interface.go

// Package mock_semaphorelogger is a generated GoMock package.
package mock_semaphorelogger

import (
	reflect "reflect"

	semaphore_logger "github.com/GettEngineering/redis-semaphore-go/semaphore/semaphore-logger"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// WithFields mocks base method
func (m *MockLogger) WithFields(fields map[string]interface{}) semaphore_logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFields", fields)
	ret0, _ := ret[0].(semaphore_logger.Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields
func (mr *MockLoggerMockRecorder) WithFields(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), fields)
}

// Log mocks base method
func (m *MockLogger) Log(level semaphore_logger.LogLevel, format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{level, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockLoggerMockRecorder) Log(level, format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{level, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), varargs...)
}
