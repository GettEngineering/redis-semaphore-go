// Code generated by MockGen. DO NOT EDIT.
// Source: ./semaphore/semaphore.go

// Package mock_semaphore is a generated GoMock package.
package mock_semaphore

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSemaphore is a mock of Semaphore interface
type MockSemaphore struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphoreMockRecorder
}

// MockSemaphoreMockRecorder is the mock recorder for MockSemaphore
type MockSemaphoreMockRecorder struct {
	mock *MockSemaphore
}

// NewMockSemaphore creates a new mock instance
func NewMockSemaphore(ctrl *gomock.Controller) *MockSemaphore {
	mock := &MockSemaphore{ctrl: ctrl}
	mock.recorder = &MockSemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSemaphore) EXPECT() *MockSemaphoreMockRecorder {
	return m.recorder
}

// Lock mocks base method
func (m *MockSemaphore) Lock() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockSemaphoreMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockSemaphore)(nil).Lock))
}

// LockWithCustomTimeout mocks base method
func (m *MockSemaphore) LockWithCustomTimeout(timeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockWithCustomTimeout", timeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockWithCustomTimeout indicates an expected call of LockWithCustomTimeout
func (mr *MockSemaphoreMockRecorder) LockWithCustomTimeout(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockWithCustomTimeout", reflect.TypeOf((*MockSemaphore)(nil).LockWithCustomTimeout), timeout)
}

// Unlock mocks base method
func (m *MockSemaphore) Unlock(resource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockSemaphoreMockRecorder) Unlock(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockSemaphore)(nil).Unlock), resource)
}

// IsResourceLocked mocks base method
func (m *MockSemaphore) IsResourceLocked(resource string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsResourceLocked", resource)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsResourceLocked indicates an expected call of IsResourceLocked
func (mr *MockSemaphoreMockRecorder) IsResourceLocked(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsResourceLocked", reflect.TypeOf((*MockSemaphore)(nil).IsResourceLocked), resource)
}

// GetNumAvailableResources mocks base method
func (m *MockSemaphore) GetNumAvailableResources() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumAvailableResources")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumAvailableResources indicates an expected call of GetNumAvailableResources
func (mr *MockSemaphoreMockRecorder) GetNumAvailableResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumAvailableResources", reflect.TypeOf((*MockSemaphore)(nil).GetNumAvailableResources))
}
